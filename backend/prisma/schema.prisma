generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  role            UserRole  @default(ADMIN)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  companyId       String?
  employeeId      String?   @unique
  approvedPayRuns PayRun[]  @relation("ApprovedBy")
  createdPayRuns  PayRun[]  @relation("CreatedBy")
  payments        Payment[]
  company         Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employee        Employee? @relation(fields: [employeeId], references: [id])

  @@index([companyId], map: "users_companyId_fkey")
  @@map("users")
}

model Company {
  id             String         @id @default(cuid())
  name           String
  address        String?
  phone          String?
  email          String?
  logo           String?
  currency       String         @default("XOF")
  payPeriodType  PayPeriodType  @default(MONTHLY)
  
  // Champs de th√®me
  themeType      String         @default("default")
  themePreset    String?
  primaryColor   String?        @default("#212121")
  secondaryColor String?        @default("#aaaaac")
  
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  attendances    Attendance[]
  employees      Employee[]
  payRuns        PayRun[]
  users          User[]
  workSchedules  WorkSchedule[]

  @@map("companies")
}

model Employee {
  id            String       @id @default(cuid())
  employeeCode  String       @unique
  firstName     String
  lastName      String
  email         String
  phone         String
  address       String?
  contractType  ContractType
  position      String
  dailyRate     Decimal?
  fixedSalary   Decimal?
  hourlyRate    Decimal?
  bankName      String?
  accountNumber String?
  isActive      Boolean      @default(true)
  hireDate      DateTime
  endDate       DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  companyId     String
  qrCode        String?      @db.Text
  attendances   Attendance[]
  company       Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  payslips      Payslip[]
  user          User?

  @@index([companyId], map: "employees_companyId_fkey")
  @@map("employees")
}

model WorkSchedule {
  id           String   @id @default(cuid())
  dayOfWeek    Int
  startTime    String
  endTime      String
  isWorkingDay Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  companyId    String
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, dayOfWeek])
  @@map("work_schedules")
}

model Attendance {
  id          String           @id @default(cuid())
  date        DateTime
  checkIn     DateTime?
  checkOut    DateTime?
  status      AttendanceStatus @default(PRESENT)
  hoursWorked Decimal?
  lateMinutes Int              @default(0)
  notes       String?
  isValidated Boolean          @default(false)
  validatedAt DateTime?
  validatedBy String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  employeeId  String
  companyId   String
  company     Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employee    Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
  @@index([companyId, date])
  @@index([employeeId, date])
  @@map("attendances")
}

model PayRun {
  id           String       @id @default(cuid())
  title        String
  periodStart  DateTime
  periodEnd    DateTime
  status       PayRunStatus @default(DRAFT)
  totalGross   Decimal      @default(0.000000000000000000000000000000)
  totalNet     Decimal      @default(0.000000000000000000000000000000)
  totalPaid    Decimal      @default(0.000000000000000000000000000000)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  approvedAt   DateTime?
  companyId    String
  createdById  String
  approvedById String?
  description  String?
  approvedBy   User?        @relation("ApprovedBy", fields: [approvedById], references: [id])
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy    User         @relation("CreatedBy", fields: [createdById], references: [id])
  payslips     Payslip[]

  @@index([approvedById], map: "pay_runs_approvedById_fkey")
  @@index([companyId], map: "pay_runs_companyId_fkey")
  @@index([createdById], map: "pay_runs_createdById_fkey")
  @@map("pay_runs")
}

model Payslip {
  id               String             @id @default(cuid())
  payslipNumber    String             @unique
  grossAmount      Decimal
  totalDeductions  Decimal            @default(0.000000000000000000000000000000)
  netAmount        Decimal
  daysWorked       Int?
  hoursWorked      Decimal?
  status           PayslipStatus      @default(PENDING)
  amountPaid       Decimal            @default(0.000000000000000000000000000000)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  employeeId       String
  payRunId         String
  daysAbsent       Int?
  daysLate         Int?
  daysPresent      Int?
  totalLateMinutes Int?
  payments         Payment[]
  deductions       PayslipDeduction[]
  employee         Employee           @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payRun           PayRun             @relation(fields: [payRunId], references: [id], onDelete: Cascade)

  @@index([employeeId], map: "payslips_employeeId_fkey")
  @@index([payRunId], map: "payslips_payRunId_fkey")
  @@map("payslips")
}

model PayslipDeduction {
  id          String        @id @default(cuid())
  type        DeductionType
  description String
  amount      Decimal
  createdAt   DateTime      @default(now())
  payslipId   String
  payslip     Payslip       @relation(fields: [payslipId], references: [id], onDelete: Cascade)

  @@index([payslipId], map: "payslip_deductions_payslipId_fkey")
  @@map("payslip_deductions")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal
  method        PaymentMethod
  reference     String?
  notes         String?
  receiptUrl    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  payslipId     String
  processedById String
  payslip       Payslip       @relation(fields: [payslipId], references: [id], onDelete: Cascade)
  processedBy   User          @relation(fields: [processedById], references: [id])

  @@index([payslipId], map: "payments_payslipId_fkey")
  @@index([processedById], map: "payments_processedById_fkey")
  @@map("payments")
}

model Document {
  id         String   @id @default(cuid())
  type       String
  title      String
  filePath   String
  fileUrl    String?
  metadata   Json?
  createdAt  DateTime @default(now())
  companyId  String?
  payRunId   String?
  employeeId String?
  payslipId  String?

  @@map("documents")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String?
  userId    String?
  details   Json?
  ipAddress String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CASHIER
  USER
}

enum ContractType {
  DAILY
  FIXED
  HONORARIUM
}

enum PayPeriodType {
  MONTHLY
  WEEKLY
  DAILY
}

enum PayRunStatus {
  DRAFT
  APPROVED
  CLOSED
}

enum PayslipStatus {
  ARCHIVED
  PENDING
  PARTIAL
  PAID
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  ORANGE_MONEY
  WAVE
  MOBILE_MONEY
  CHECK
  OTHER
}

enum DeductionType {
  TAX
  SOCIAL
  INSURANCE
  LOAN
  ADVANCE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  SICK_LEAVE
  VACATION
  UNPAID_LEAVE
}
