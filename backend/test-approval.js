import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

// Test d'approbation d'un cycle pour d√©sarchiver les bulletins
async function testPayRunApproval() {
  try {
    console.log('üöÄ Test d\'approbation d\'un cycle de paie...');
    
    // Trouver le cycle de septembre (status DRAFT)
    const payRun = await prisma.payRun.findFirst({
      where: {
        title: 'Paie Septembre 2025',
        status: 'DRAFT'
      },
      include: {
        _count: {
          select: {
            payslips: true
          }
        }
      }
    });
    
    if (!payRun) {
      console.log('‚ùå Cycle de septembre non trouv√©');
      return;
    }
    
    console.log(`‚úÖ Cycle trouv√©: ${payRun.title} (${payRun.id})`);
    console.log(`üìã ${payRun._count.payslips} bulletins dans le cycle`);
    
    // V√©rifier les bulletins archiv√©s avant approbation
    const archivedBefore = await prisma.payslip.count({
      where: { 
        payRunId: payRun.id,
        status: 'ARCHIVED'
      }
    });
    
    const pendingBefore = await prisma.payslip.count({
      where: { 
        payRunId: payRun.id,
        status: 'PENDING'
      }
    });
    
    console.log(`üìä Avant approbation: ${archivedBefore} archiv√©s, ${pendingBefore} en attente`);
    
    // R√©cup√©rer un admin pour l'approbation
    const admin = await prisma.user.findFirst({
      where: { 
        companyId: payRun.companyId,
        role: 'ADMIN'
      }
    });
    
    if (!admin) {
      console.log('‚ùå Admin non trouv√©');
      return;
    }
    
    console.log(`‚úÖ Admin: ${admin.firstName} ${admin.lastName}`);
    
    // Simuler l'approbation (d√©sarchivage)
    console.log('üîÑ Approbation du cycle...');
    
    const result = await prisma.$transaction(async (tx) => {
      // Mettre √† jour le statut du cycle
      const updatedPayRun = await tx.payRun.update({
        where: { id: payRun.id },
        data: {
          status: 'APPROVED',
          approvedById: admin.id,
          approvedAt: new Date(),
        },
      });
      
      // D√©sarchiver tous les bulletins (ARCHIVED ‚Üí PENDING)
      const updatedPayslips = await tx.payslip.updateMany({
        where: {
          payRunId: payRun.id,
          status: 'ARCHIVED'
        },
        data: {
          status: 'PENDING'
        }
      });
      
      return {
        payRun: updatedPayRun,
        payslipsCount: updatedPayslips.count
      };
    });
    
    console.log(`‚úÖ Cycle approuv√© !`);
    console.log(`üîì ${result.payslipsCount} bulletins d√©sarchiv√©s`);
    
    // V√©rifier les bulletins apr√®s approbation
    const archivedAfter = await prisma.payslip.count({
      where: { 
        payRunId: payRun.id,
        status: 'ARCHIVED'
      }
    });
    
    const pendingAfter = await prisma.payslip.count({
      where: { 
        payRunId: payRun.id,
        status: 'PENDING'
      }
    });
    
    console.log(`üìä Apr√®s approbation: ${archivedAfter} archiv√©s, ${pendingAfter} en attente`);
    
    // Afficher les bulletins en attente de paiement
    const pendingPayslips = await prisma.payslip.findMany({
      where: { 
        payRunId: payRun.id,
        status: 'PENDING'
      },
      include: {
        employee: {
          select: { firstName: true, lastName: true }
        }
      }
    });
    
    console.log(`\nüí∞ Bulletins en attente de paiement (${pendingPayslips.length}):`);
    pendingPayslips.forEach(p => {
      console.log(`- ${p.employee.firstName} ${p.employee.lastName}: ${p.netAmount} XOF (PR√äT POUR PAIEMENT)`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testPayRunApproval();